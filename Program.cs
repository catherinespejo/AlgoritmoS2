using System;
using System.Diagnostics;
using System.Threading;

class Program
{
    static int[] originalArray = {}; // Arreglo de ejemplo
    
    static int numberToFind = 10; // Número a buscar

    static void Main(string[] args)
    {
        Console.WriteLine($"Arreglo original: [{string.Join(", ", originalArray)}]");
        Console.WriteLine($"Número a buscar: {numberToFind}\n");

        // Ejecutar algoritmos de ordenamiento por separado
        
        new Thread(() => RunAlgorithm("QuickSort", originalArray, QuickSort)).Start();
        new Thread(() => RunAlgorithm("Inserción", originalArray, InsertionSort)).Start();
        new Thread(() => RunAlgorithm("Burbuja", originalArray, BubbleSort)).Start();

        // Ejecutar algoritmos de búsqueda por separado

        new Thread(() => RunAlgorithm("Búsqueda Secuencial", originalArray, arr => SequentialSearch(arr, numberToFind))).Start();

        // Para Búsqueda Binaria, usar un arreglo ordenado
        int[] sortedArray = (int[])originalArray.Clone();
        Array.Sort(sortedArray); // Asegurarse de que el arreglo esté ordenado para la búsqueda binaria
        new Thread(() => RunAlgorithm("Búsqueda Binaria", sortedArray, arr => BinarySearch(arr, numberToFind))).Start();

        //Console.WriteLine($"Arreglo original: [{string.Join(", ", originalArray)}]");
        //Console.WriteLine($"Número a buscar: {numberToFind}\n");

        // Iniciar hilos para cada combinación de algoritmo de ordenamiento y búsqueda
        //new Thread(() => SortAndSearch("Burbuja", BubbleSort, SequentialSearch)).Start();
        //new Thread(() => SortAndSearch("QuickSort", QuickSort, SequentialSearch)).Start();
        //new Thread(() => SortAndSearch("Inserción", InsertionSort, SequentialSearch)).Start();

        //new Thread(() => SortAndSearch("Burbuja", BubbleSort, BinarySearch)).Start();
        //new Thread(() => SortAndSearch("QuickSort", QuickSort, BinarySearch)).Start();
        //new Thread(() => SortAndSearch("Inserción", InsertionSort, BinarySearch)).Start();
    
}

    static void RunAlgorithm(string algorithmName, int[] array, Action<int[]> algorithm)
    {
        int[] arrCopy = (int[])array.Clone(); // Clonar para no modificar el arreglo original
        long startTime = Stopwatch.GetTimestamp();
        algorithm(arrCopy);
        long endTime = Stopwatch.GetTimestamp();
        double elapsedNanoSeconds = (endTime - startTime) * (1E9 / Stopwatch.Frequency);
        Console.WriteLine($"{algorithmName} completado en {elapsedNanoSeconds:N0} ns");
    }

    static void RunAlgorithm(string algorithmName, int[] array, Func<int[], int, bool> algorithm)
    {
        long startTime = Stopwatch.GetTimestamp();
        bool found = algorithm(array, numberToFind);
        long endTime = Stopwatch.GetTimestamp();
        double elapsedNanoSeconds = (endTime - startTime) * (1E9 / Stopwatch.Frequency);
        Console.WriteLine($"{algorithmName} ({(found ? "Encontrado" : "No Encontrado")}) completado en {elapsedNanoSeconds:N0} ns");
    }

    static void SortAndSearch(string sortMethod, Action<int[]> sortingAlgorithm, Func<int[], int, bool> searchAlgorithm)
    {
        int[] array = (int[])originalArray.Clone();

        // Medir tiempo de ordenamiento
        long startSortTime = Stopwatch.GetTimestamp();
        sortingAlgorithm(array); // Ordena el arreglo
        long endSortTime = Stopwatch.GetTimestamp();
        double sortDurationNanoSeconds = ((endSortTime - startSortTime) / (Stopwatch.Frequency / (1E9)));
        //Console.WriteLine($"{sortMethod}: Ordenamiento completado en {sortDurationNanoSeconds:N0} ns");

        // Medir tiempo de búsqueda
        long startSearchTime = Stopwatch.GetTimestamp();
        bool found = searchAlgorithm(array, numberToFind); // Busca el número
        long endSearchTime = Stopwatch.GetTimestamp();
        double searchDurationNanoSeconds = ((endSearchTime - startSearchTime) / (Stopwatch.Frequency / (1E9)));
        //Console.WriteLine($"{(searchAlgorithm == SequentialSearch ? "Búsqueda Secuencial" : "Búsqueda Binaria")}: {(found ? "Número encontrado" : "Número no encontrado")} en {searchDurationNanoSeconds:N0} ns");

        // Calcular y mostrar el tiempo total de la combinación
        double totalDurationNanoSeconds = sortDurationNanoSeconds + searchDurationNanoSeconds;
        Console.WriteLine($"Total ({sortMethod} + {(searchAlgorithm == SequentialSearch ? "Secuencial" : "Binaria")}): {totalDurationNanoSeconds:N0} ns\n");
    }

    

    static void BubbleSort(int[] array)
    {
        int temp;
        for (int i = 0; i < array.Length; i++)
        {
            for (int j = 0; j < array.Length - 1; j++)
            {
                if (array[j] > array[j + 1])
                {
                    temp = array[j + 1];
                    array[j + 1] = array[j];
                    array[j] = temp;
                }
            }
        }
    }

    static void QuickSort(int[] array)
    {
        QuickSortInternal(array, 0, array.Length - 1);
    }

    static void QuickSortInternal(int[] array, int low, int high)
    {
        if (low < high)
        {
            int pivot = Partition(array, low, high);
            QuickSortInternal(array, low, pivot - 1);
            QuickSortInternal(array, pivot + 1, high);
        }
    }

    static int Partition(int[] array, int low, int high)
    {
        int pivot = array[high];
        int i = low - 1; // Index of smaller element
        for (int j = low; j < high; j++)
        {
            // If current element is smaller than or equal to pivot
            if (array[j] <= pivot)
            {
                i++;

                // Swap arr[i] and arr[j]
                int temp = array[i];
                array[i] = array[j];
                array[j] = temp;
            }
        }

        // Swap arr[i+1] and arr[high] (or pivot)
        int temp1 = array[i + 1];
        array[i + 1] = array[high];
        array[high] = temp1;

        return i + 1;
    }

    static void InsertionSort(int[] array)
    {
        for (int i = 1; i < array.Length; i++)
        {
            int key = array[i];
            int j = i - 1;
            while (j >= 0 && array[j] > key)
            {
                array[j + 1] = array[j];
                j = j - 1;
            }
            array[j + 1] = key;
        }
    }

    static bool SequentialSearch(int[] array, int value)
    {
        foreach (int item in array)
        {
            if (item == value)
            {
                return true;
            }
        }
        return false;
    }

    static bool BinarySearch(int[] array, int value)
    {
        int low = 0, high = array.Length - 1;
        while (low <= high)
        {
            int mid = low + (high - low) / 2;

            if (array[mid] == value)
                return true;

            if (array[mid] < value)
                low = mid + 1;
            else
                high = mid - 1;
        }
        return false;
    }
}
